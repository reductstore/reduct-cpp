name: "build-package-cmake"
description: "Install package and build example"
inputs:
  build_tests:
    default: "false"
  install:
    default: "true"
    description: "Install the package after build"
runs:
  using: "composite"
  steps:
    - name: Detect OS and install OpenSSL
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          choco install openssl -y
          openssl version
        fi

    - name: Detect OS and set std::chrono flag
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          echo "USE_CHRONO=OFF" >> $GITHUB_ENV
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          echo "USE_CHRONO=ON" >> $GITHUB_ENV
        fi
    - name: Cmake configuration without tests
      if: ${{inputs.build_tests == 'false'}}
      shell: bash
      run: cmake -S . -B build -DREDUCT_CPP_USE_STD_CHRONO=$USE_CHRONO -DREDUCT_CPP_USE_FETCH_CONTENT=ON

    - name: Cmake configuration with tests
      if: ${{inputs.build_tests == 'true'}}
      shell: bash
      run: cmake -S . -B build -DREDUCT_CPP_ENABLE_TESTS=ON -DREDUCT_CPP_USE_STD_CHRONO=$USE_CHRONO -DREDUCT_CPP_USE_FETCH_CONTENT=ON

    - name: Build package
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          cmake --build build
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          cmake --build build --config Release
        fi

    - name: Install package
      if: ${{inputs.install == 'true' }}
      run: sudo cmake --install build
      shell: bash
