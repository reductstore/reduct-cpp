name: ci
on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
    branches: [main]
jobs:
  cpplint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Build cpplint image
        run: pip install "cpplint<2"
      - name: Check code in /src
        run: find src/ \( -name "*.cc" -o -name "*.h" \) -print0 | xargs -0 cpplint
      - name: Check code in /tests
        run: find tests/ \( -name "*.cc" -o -name "*.h" \) -print0 | xargs cpplint
      - name: Check code in /examples
        run: find examples/ \( -name "*.cc" -o -name "*.h" \) -print0 | xargs cpplint

  check-example:
    runs-on: ${{ matrix.os }}
    needs: cpplint
    strategy:
      matrix:
        os: [ubuntu-22.04]
        include:
          - os: ubuntu-22.04
            install: "true"
          - os: windows-2022
            install: "false"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect OS and install OpenSSL
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
          choco install openssl -y
          openssl version
          fi

      - name: Detect OS and install dependencies
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev

     # - name: Build example
     #   shell: bash
     #   run: |
     #     if [[ "${{ runner.os }}" == "Linux" ]]; then
     #       cmake -S examples -B build -DREDUCT_CPP_USE_STD_CHRONO=OFF -DREDUCT_CPP_EXAMPLE_USE_FETCHCONTENT=ON
     #       cmake --build build
     #     elif [[ "${{ runner.os }}" == "Windows" ]]; then
     #       cmake -S examples -B build -DREDUCT_CPP_USE_STD_CHRONO=ON -DREDUCT_CPP_EXAMPLE_USE_FETCHCONTENT=ON
     #       cmake --build build --config Release
     #     fi

      - name: Build and install package
        shell: bash
        run: |
          sudo apt install -y libfmt-dev
          cmake -S . -B build
          cmake --build build
          cmake --install build

      - name: Build example
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            cmake -S examples -B build -DREDUCT_CPP_USE_STD_CHRONO=OFF
            cmake --build build
          fi


  # unit-tests:
  #   strategy:
  #     matrix:
  #       token: ["", "TOKEN"]
  #       reductstore_version: ["main", "latest"]
  #       license_file: ["", "lic.key"]
  #       package_manager: ["vcpkg", "conan"]
  #       include:
  #         - token: ""
  #           exclude_token_api_tag: "~[token_api]"
  #         - token: "TOKEN"
  #           exclude_token_api_tag: ""
  #         - reductstore_version: "main"
  #           exclude_api_version_tag: ""
  #         - reductstore_version: "latest"
  #           exclude_api_version_tag: "~[1_16]"
  #         - license_file: ""
  #           exclude_license_tag: "~[license]"
  #
  #   needs:
  #     - cpplint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #
  #     - name: Build with vcpkg
  #       if: matrix.package_manager == 'vcpkg'
  #       uses: ./.github/actions/build-package-vcpkg
  #       with:
  #         build_tests: true
  #
  #     - name: Build with conan
  #       if: matrix.package_manager == 'conan'
  #       uses: ./.github/actions/build-package-conan
  #       with:
  #         build_tests: true
  #
  #     - name: Generate license
  #       run: echo '${{secrets.LICENSE_KEY}}' > lic.key
  #
  #     - uses: ./.github/actions/run-tests
  #       with:
  #         api-token: ${{matrix.token}}
  #         tags: "${{matrix.exclude_token_api_tag}} ${{matrix.exclude_api_version_tag}} ${{matrix.exclude_license_tag}}"
  #         reductstore-version: ${{matrix.reductstore_version}}
  #         lic_file: ${{matrix.license_file}}
