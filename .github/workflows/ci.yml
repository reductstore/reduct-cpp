name: ci
on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
    branches: [main]
jobs:
  cpplint:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
      - name: Build cpplint image
        run: pip install "cpplint<2"
      - name: Check code in /src
        run: find src/ \( -name "*.cc" -o -name "*.h" \) -print0 | xargs -0 cpplint
      - name: Check code in /tests
        run: find tests/ \( -name "*.cc" -o -name "*.h" \) -print0 | xargs cpplint
      - name: Check code in /examples
        run: find examples/ \( -name "*.cc" -o -name "*.h" \) -print0 | xargs cpplint

  check-example:
    runs-on: ${{ matrix.os }}
    needs: cpplint
    strategy:
      matrix:
        os: [ubuntu-24.04, windows-2022]
        dependency: [system, fetchcontent]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install OpenSSL on Windows
        if: ${{ runner.os == 'Windows' }}
        shell: bash
        run: |
          cd && vcpkg install openssl && cd -
          openssl version
          echo "BUILD_TAIL=--config Release" >> $GITHUB_ENV
          echo "USE_CHRONO=ON" >> $GITHUB_ENV

      - name: Install OpenSSL on Linux
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev
          echo "USE_CHRONO=OFF" >> $GITHUB_ENV

      - name: Set use_fetchcontent
        shell: bash
        if: matrix.dependency == 'fetchcontent'
        run: echo "USE_FETCHCONTENT=ON" >> $GITHUB_ENV

      - name: Install package
        if: matrix.dependency == 'system'
        uses: ./.github/actions/build-package-system

      - name: Build example
        shell: bash
        run: |
          cd examples
          cmake -S . -B build -DREDUCT_CPP_USE_STD_CHRONO=${USE_CHRONO} -DREDUCT_CPP_EXAMPLE_USE_FETCHCONTENT=${USE_FETCHCONTENT}
          cmake --build build ${BUILD_TAIL}

  unit-tests:
    strategy:
      matrix:
        token: ["", "TOKEN"]
        reductstore_version: ["main", "latest"]
        license_file: ["", "lic.key"]
        package_manager: ["vcpkg", "conan"]
        include:
          - token: ""
            exclude_token_api_tag: "~[token_api]"
          - token: "TOKEN"
            exclude_token_api_tag: ""
          - reductstore_version: "main"
            exclude_api_version_tag: ""
          - reductstore_version: "latest"
            exclude_api_version_tag: "~[1_17]"
          - license_file: ""
            exclude_license_tag: "~[license]"

    needs:
      - cpplint
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build with vcpkg
        if: matrix.package_manager == 'vcpkg'
        uses: ./.github/actions/build-package-vcpkg
        with:
          build_tests: true

      - name: Build with conan
        if: matrix.package_manager == 'conan'
        uses: ./.github/actions/build-package-conan
        with:
          build_tests: true

      - name: Generate license
        run: echo '${{secrets.LICENSE_KEY}}' > lic.key

      - uses: ./.github/actions/run-tests
        with:
          api-token: ${{matrix.token}}
          tags: "${{matrix.exclude_token_api_tag}} ${{matrix.exclude_api_version_tag}} ${{matrix.exclude_license_tag}}"
          reductstore-version: ${{matrix.reductstore_version}}
          lic_file: ${{matrix.license_file}}
